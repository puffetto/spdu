#! /bin/bash

# Edit this file and place it in /usr/local/etc/

# Binaries
# These are the full paths for the utilities used by sdpu internally
# We use the tools coming with kdns by default (kdig, khost, knsupdate),
# the ones by ISC (dig, host, nsupdate) SHOULD work but have not been tested
# You might want to review the other ones and ensure you have everything 
# needed on your machine.
#dig="/usr/local/bin/kdig"
#nsupdate="/usr/local/bin/knsupdate"
#host="/usr/local/bin/khost"
#curl="/usr/local/bin/curl"
#sleep="/bin/sleep"

## DOMAIN

# This is our domain name, no trailing dot, defaults to the
# output of hostname -d, it is used to build the defaults
# for several other parameters
#domain=`hostname -d`

## NAMESERVER

# This is the name or the IP address of our nameserver, 
# typically localhost; defaults to 127.0.0.1
#nameServer="127.0.0.1"

# This is the TTL value used to add records in DNS pool,
# default 5
#nameTTL="5"

## EMAIL

# This is the list of email addresses to inform about pool
# changes, SPACE separated, defaults to none
#mailTo=""

# This is the sender address for notification emails,
# defaults to "spdu@${domain}"
#mailFrom="spdu@${domain}"

# This is the smtp authetication user, defaults to $mailFrom,
# used only if you specify a password.
#smtpUser="${mailFrom}"

# This is the smtp authentication password, defaults to nothing,
# if it is empty then NO authentication will take place on SMTP
# (i.e. you are using a local relay accepting emails from your IP)
#smtpPassword=''

# Your SMTP relay, used to send emails, defaults to "smtp.${domain}"
#smtpRelay="smtp.${domain}"

# Wether to use SSL on SMTP, defaults to yes
# smtpSSL="yes"

# Port to use for SMTP, defaults to 443 if smtpSSL=yes, 25 otherwise
# smtpPort="443"

## API

# This is the domain containing the public name for the API,
# defaults to ${domain}, fully qualified but no trailing dot.
#apiDomain="${domain}"

# This is the host name component of the public API, if it does
# not contain dots then .$apiDomain will be appended, defaults
# to "api" (which gets completed by default to api.domain.tld).
#apiName="api"

## PROBE

# This is the path to be probed on the node to check if it is
# alive, anyting returning a "200 OK" will do, actual content
# is ignored; you can also specify parameters here, like
# trysomething?password=bla&value=buh
# Default "status", thus if your service is http://api.domain.tld
# we will fetch http://api.domain.tld/status
# Do not add any leading '/', empty string is ok as long as 
# your API returns a 200 for http://api.domain.tld/
#probePath="status"

# Timeout when probing the node, keep this reasonaly short,
# in seconds, decimals allowed as long as your cURL supports
# them, default 2.0
#probeTimeout="2.0"

# As we do not want to take the node off the DNS for short
# and temporary failures the probe will be retied this number
# of times if it fails, default 3, integer.
#probeRetries="3"

# This is the probe loop pause, the service will be checked
# every ${loopWait} seconds at most, note that thi time can be
# much longer, in example if the server is unreachable and the
# IP stack does not report the failure upstream probes will
# actually occur every at least a maximum time of 
# $probeRetries*(${probeTimeout}+${loopWait}) seconds, which 
# is 12 seconds with all the defaults. 
# Should also the DNS be down it can be even more, and
# finally also the processing time gets in. 
# Default 2, integer.
#loopWait="2"

# Wether you want to use SSL when probing a node, please note
# that if you do it any SSL failure (includine expired certificates)
# will be considered a node failure and the ndoe will be pulled out
# of the pool, literally "yes" or "no", default "no".
# Note that SSL requests will be on port 443, plain ones on 80
#probeSSL="no"

# Port to probe the service on, defaults to 80 if probeSSL=no
# and to 443 if probeSSL=yes
#probePort="80"

## POOL

# This is the domain containing the pool zone, default ${domain}
#poolDomain="${domain}"

# This is the pool zone, if it does not contain dots then 
# ${poolDomain} is appended, defaults to "pool"
#poolZone="pool"

# This is the pool name, if it does not contain dots then 
# ${poolZone} is appended, defaults to "api"
#poolName="api"

# If the machine is properly configured the default is then
# that poolName will be "api.pool.domain.tld" and the script
# will add/remove the IP address of the target in the zone
# "pool.domain.tld" for the name "api.pool.domain.tld"
# Note that if you set $poolName to something containing dots
# all the rest will be ignored; the actual poolZone will be 
# derived from the final fully qualified $poolName

